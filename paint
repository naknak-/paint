#!/bin/bash -u 
# paint: Apply colors and effects, by name, using grep
# usage: $0 foreground-background-effect [optional arguments to grep]"
# 
#  https://github.com/naknak-/paint
#  released under MIT license
#
#v100 initial release
#v101 usage improvements: more examples, better explanation of Red/RED
#v102 autocompute names[] and sample width
#v103 force -P, allow switches before spec, force . delimiter, allow /foo/ _foo_, polish usage, bugfixes
#v104 add |^ to patterns
#v105 self-test ("paint test"); interpret leading -h as grep -h, not -help (--help still works); parsing more robust in the face of e.g. "-m 4"

readonly me=paint
readonly bg_offset=10
export DEBUG=$(( !! "${DEBUG:-0}" ))
export DARK=$(( !! "${DARK:-0}" ))
declare -rA paints=(
    [reset]=0                    
    [bold]=1          [b]=1      
    [dim]=2           [d]=2      
    [italic]=3        [i]=3      
    [underline]=4     [u]=4      
    [blink]=5                    
    [flash]=6                    
    [reverse]=7       [rev]=7    
    [spoiler]=8                  
    [strike]=9        [xx]=9     
    [thin]=19         [t]=19               
    [gothic]=20                  
    [doubleunder]=21  [uu]=21    
    [superscript]=73  [sup]=73   
    [subscript]=74    [sub]=74   
    [black]=30        [k]=30     
    [red]=31          [r]=31     
    [green]=32        [g]=32     
    [gold]=33         [au]=33    
    [navy]=34         [n]=34     
    [purple]=35       [pr]=35    
    [aqua]=36         [a]=36     
    [silver]=37       [s]=37     [light]=37
    [default]=39                 
    [ash]=90          [dark]=90  
    [pink]=91         [p]=91     
    [lime]=92         [l]=92     
    [yellow]=93       [y]=93     
    [sky]=94                     
    [magenta]=95      [m]=95     
    [cyan]=96         [c]=96     
    [white]=97        [w]=97     
  )
declare -ra is_color=( [30]=1 [31]=1 [32]=1 [33]=1 [34]=1 [35]=1 [36]=1 [37]=1 [39]=1 [90]=1 [91]=1 [92]=1 [93]=1 [94]=1 [95]=1 [96]=1 [97]=1 )
declare -ra effects=( {1..9} 19 20 21 73 74 0 )

declare -A macros=(
    [head]=b.u
    [shh]=gray.d.i.t
    [viz]=k.y
    [info]=dim
    [gy]=gray
  )

# init_macros( dark=0 ) 
init_macros() {
  if (( ${1:-0} )); then # dark
    macros[err]=pink
    macros[warn]=magenta
    macros[ok]=lime
    macros[gray]=silver
    macros[blue]=sky
  else # light
    macros[err]=red
    macros[warn]=purple
    macros[ok]=green
    macros[gray]=ash
    macros[blue]=navy
  fi
}
init_macros DARK

unset GREP_COLOR

((DEBUG)) && declare -p paints | sed 's/\[/\n\t[/g' 

# sample( paint text=names_for_paint after=\n fmt=-${widest}s )
sample() { 
    local code="${paints[$1]:-$1}" legend ansi
    if [[ $code = [0-9]* ]]
      then ansi="$code"
      else ansi="$(str2ansi "$1")"
    fi
    [[ -z "${2-}" ]] && legend="${names[$code]:-${names[$(( code - bg_offset ))]}}"
    printf "\e[%sm%${4:--${widest:-15}s}\e[0m%s" "$ansi" "${2:-$legend}" "${3-$'\n'}"
} 

# die( text rc=1 )
die() { sample "31;107;1" "$1" >&2; exit "${2-1}"; }

usage() {
    declare -A names=()
    local e=-1 c widest=0
    IFS=$'\n'
    for x in $( printf "%s\n" "${!paints[@]}" | sort ); do
      names[${paints[$x]}]+=" $x";
      (( ${#names[${paints[$x]}]} > widest )) && widest=${#names[${paints[$x]}]}
    done
  
    sample b.u "Usage:" "" s
    echo " $me foreground.background.effect [arguments to grep -P]"
    echo
    sample i "Apply colors and effects, by name, to text"
    sample thin "\
  * effects may be combined.
  * foreground, background, effect are all optional. 
  * if omitting foreground, start with a dot.
  * grep pattern is optional, defaults to whole line
  * set environment DARK=1 to use dark versions of macros
  * grep args beginning with '-' may precede the paint-spec
"

    declare -A protips=( 
        ["b bold"]="titlecase (\"Red\") implies bold" 
        ["rev reverse"]="or all-caps" 
        ["i italic"]="or say /red/"
        ["u underline"]="or _red_"
        [blink]="blink suppressed here"
        [flash]="but you can try it yourself" 
        [spoiler]="(that says \"spoiler\")"
      )
    declare -A nodemo=( [blink]=1 [flash]=1 )
    sample u "colors and effects:"
    for c in "${!is_color[@]}"; do
        printf "  "
        sample "$c" "" " "
        sample "$((c+10))" "" "  "
        if (( ++e < ${#effects[@]} )); then
          local label="${names[${effects[e]}]}" effect=${effects[e]}
          (( nodemo[${label# }] )) && effect=0
          sample $effect "$label" "" 
          sample shh " ${protips[${label# }]:- }"
        else
          echo
        fi
    done
    echo   

    local sample_text example
    printf -vsample_text " %(%a %e %b %H:%M)T "

    printf "%-19s %-40s   %s\n" "$( sample u "macros:" "" s )" "$( sample u DARK=0 "" s ) (default)" "$( sample u DARK=1 "" s )"
    local dark
    for example in "${!macros[@]}";do 
      printf "  %-7s " "$example"
      for dark in 0 1; do
        init_macros $dark
        sample $example "$sample_text" "" 
        [[ -n ${macros[$example]-} ]] && sample shh " ${macros[$example]}" "" -17s
      done
      init_macros $DARK
      echo
    done
    echo
    
    declare -A examples=(
      [lime.gray.bold]="fg.bg.effect"
      [l.gy.b]="same thing, abbreviated"
      [pink]="foreground only"
      [.pink]="background only"
      [strike.b.i.u]="effects only"
      [BLUE]="all caps implies reverse"
      [Blue]="titlecase implies bold"
      [/blue/]="/color/ for italic color"
      [_blue_]="... or _ for underline"
    )
    sample u "examples:" $'\n' s
    sample b "$ date | $me _________"
    for example in lime.gray.bold l.gy.b pink .pink strike.b.i.u BLUE Blue /blue/ _blue_ ; do 
      printf "  %-20s  " "$example"
      sample $example "$sample_text" ""
      sample shh "  ${examples[$example]}"
    done
    echo

    sample u "cookbook:" $'\n' s
    cookbook "highlight specific text"       'date  | paint red "Sat|Sun" '
    cookbook "-z prevents added newline"     "echo -n hello | paint blue -z" 
    cookbook "highlight today's date"        'ls -l | paint OK $( date +"%b.%e(?=...:)" )'
    cookbook "color stderr"                  '[[ -t 2 ]] && exec 2> >(paint err)'    
    cookbook "... then clean up at end"      'exec 2<&- ; wait'
    cookbook "first line only"               "df | paint head -z '^.*'"
    cookbook "words only, first line only"   "df | paint head -z '(?<=(^|\G)\h{,99})\S+'"
    cookbook "... and mark high percentages" "df | paint head -z '(?<=(^|\G)\h{,99})\S+' \\
                                           | paint ERR -z '9.%|1..%'"
    cookbook "underline every third word"    "date | paint u '(\S+\s+){2}\K\S+'"
    cookbook "dim alternating lines"         "ls -l | paint dim -z '.*\n\K.*\n'"
    echo
    exit 0 
}

assert() {
  local x=$1 sample=$'a 1\nz'
  (( n++ ))
  shift
  printf "%-20s| " "$*"
  local got="$( printf "%s" "$sample" | paint "$@" 2>&1 | perl -0777pe '
    s/ \e \[ ( [\d;]* ) m \e \[K /{$1}/gx;
    s/ \e \[ 0m /{}/gx;
    s/ \e \[ 31;107;1m unknown[ ]paint[ ]spec:[ ]/{E_SPEC}/gx;
    s/ \e \[ 31;107;1m /{ERR}/gx;
    s,\r*\n,/,g; 
    s/\e/<ESC>/g;
    s/\0/<NULL>/g;
    s/grep: (.*): No such file or directory/{nosuch:$1}/;
    s/([\x01-\x1f])/ sprintf "<%02x>" => ord $1 /ge;
    s| ^ ( \{ [\d;]* \} ) a[ ]1 \{\} / \1 z \{\} / $ |{$1}|x;
  ' )"
  if [[ $got = $x ]]
    then printf "ok\n"
    else 
        printf "%s" "$sample" | paint "$@" 2>&1
        printf "FAIL:\n\t\texpected:\t%s\n\t\tgot:\t\t%s\n" "$x" "$got"
        ((err++))
        echo
  fi
}

selftest() {
  local n=0 err=0

  export DARK
  set -x
  DARK=0
  { set +x; } >&/dev/null
  assert "{{31}}"          red
  assert "{E_SPEC}'1'{}/"  -C 1 red
  assert "{{31}}"          -C1 red
  assert "{nosuch:^}/"     -e'.*' red
  assert "{nosuch:^}/"     --regexp='.*' red
  assert "{{31}}"          red -e'.*'
  assert "{{31}}"          red --regexp='.*'
  assert '{31}a{} 1/z/'    red a
  assert '{31}a{} 1/z/'    red "a|"
  assert '{31}a{} 1/'      red 'a|\'
  assert '{31}a 1/z{}'     -z red
  assert '{31}a 1/z{}'     red -z
  assert '{39;41}a 1/z{}'  -z .red
  assert 'a 1/z/'          --color=never red
  assert '{{32;7}}'        OK
  assert '{{32;4}}'        _ok_
  assert '{{32;1;4}}'      _Ok_
  assert '{{32;3}}'        /ok/
  assert '{{32;3;4}}'      /ok_
  set -x;
  DARK=1
  { set +x; } >&/dev/null
  assert "{{31}}"          red
  assert "{{31}}"          err
  assert "{{92;100;1}}"    lime.gray.bold   
  assert "{{92;100;1}}"    l.gy.b          
  assert "{{91}}"          pink           
  assert "{{39;101}}"      .pink         
  assert "{{1;91}}"        b.pink         
  assert "{{39;101;1}}"    .pink.b         
  assert "{{9;1;3;4}}"     strike.b.i.u 
  assert "{{34;7}}"        BLUE        
  assert "{{34;1}}"        Blue       
  assert "{{34;3}}"        /blue/    
  assert "{{34;4}}"        _blue_   


  printf  "%3s failures in %s tests\n" $err $n
  exit $(( !! $err ))
}

cookbook() {
  sample shh "  $1" "" -33s;
  printf "%s%s\n" "$2" ${3:+$' \\\n\t\t\t\t'}"${3-}"
}

debug() { 
  (( DEBUG )) || return 0
  local x
  if (( $# >1 )); then 
    printf -vx "$@"
  else 
    x="$1"
  fi
  sample dim "$x" >&2
}

str2ansi() {
    local spec="$1" is_bg=0 name esc code
    while [[ -n $spec && $spec =~ ^([_/]*)([a-zA-Z]*)([/_]*)([.]+(.+)|$) ]]; do 
        debug "match:[%s]\n" "spec=$spec" "${BASH_REMATCH[@]}"
        name="${BASH_REMATCH[2]:-default}" spec="${BASH_REMATCH[5]}" affix="${BASH_REMATCH[1]}${BASH_REMATCH[3]}"
        [[ $name =~ ^[A-Z][A-Z0-9]*$  ]] && spec+="${spec:+.}reverse"
        [[ $name =~ ^[A-Z][0-9]*[a-z] ]] && spec+="${spec:+.}bold"
        [[ $affix =~ / ]] && spec+="${spec:+.}italic"
        [[ $affix =~ _ ]] && spec+="${spec:+.}underline"
        name="${name,,}"
        code="${paints[$name]:-${macros[$name]?unknown paint spec: $name}}"
        if [[ $code = [0-9]* ]]; then 
            esc+="${esc+;}$(( code + bg_offset * is_bg * is_color[code] ))" 
            (( is_color[code] )) && is_bg=1
        else
            spec="$code${spec:+.$spec}" 
        fi
    done
    (( ${#spec} )) && die "unknown paint spec: '$spec'"
    echo "${esc-}"
}

paint() { 
    local target="sl" ansi arg saw_pat= pat_is_next= arg_is_next=0 switches="^-[a-dg-ln-zE-Z]*"
    declare -a args=()
    while [[ ${1-} = -* ]]; do args+=( "$1" ); shift; done
    (( $# )) || usage
    ansi="$(str2ansi "$1")"
    shift
    for arg; do
      debug "arg=$arg"
       (( arg_is_next-- > 0 )) || { 
        if [[ $arg =~ ${switches}f|^--file ]]; then saw_pat=1
        elif [[ $arg =~ ^[^-]|^--regexp=.|${switches}e. || $pat_is_next = 1 ]]; then arg+="|^" saw_pat=1
        elif [[ $arg =~ ${switches}[ABCDmd]$ ]]; then arg_is_next=2 
        elif [[ $arg = -- || $arg =~ ${switches}e$ ]]; then pat_is_next=1
        fi
      }
      args+=( "$arg" )
      shift
      (( saw_pat )) && break
    done
    if (( saw_pat )) 
      then target=mt
      else args+=("^")
    fi
    debug "arg:[%s]\n" "${args[@]}"
    ((DEBUG)) && set -x
    [[ -n $ansi ]] && GREP_COLORS="$target=$ansi" grep --line-buffered -Pa --color=always "${args[@]}" "$@" | tr -d '\0'
}

(( $# )) && [[ $1 != --help ]] || usage	
[[ $1 = test ]] && selftest
paint "$@"